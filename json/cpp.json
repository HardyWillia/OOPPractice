{"kind": "Listing", "data": {"after": "t3_8amh2s", "dist": 27, "modhash": "", "whitelist_status": "all_ads", "children": [{"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Happy April Fool&amp;#39;s Day!&lt;/p&gt;\n\n&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create one top-level comment for &lt;strong&gt;meta&lt;/strong&gt; discussion.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddit.com/wiki/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, secret code hidden in the C++ draft?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/7ne705/whos_hiring_c_devs_q1_2018/\"&gt;Who&amp;#39;s Hiring C++ Devs - Q1 2018&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Happy April Fool's Day!\n\nRules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create one top-level comment for **meta** discussion.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddit.com/wiki/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, secret code hidden in the C++ draft?]\n\n---\n\nPrevious Post\n--------------\n\n* [Who's Hiring C++ Devs - Q1 2018](https://www.reddit.com/r/cpp/comments/7ne705/whos_hiring_c_devs_q1_2018/)\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "88nlpv", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "blelbach", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 55, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "", "contest_mode": true, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "NVIDIA | Thrust l HPX | C++ Committee | CppCon | C++Now", "stickied": true, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_88nlpv", "spoiler": false, "permalink": "/r/cpp/comments/88nlpv/whos_hiring_c_devs_q2_2018/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1522577717.0, "url": "https://www.reddit.com/r/cpp/comments/88nlpv/whos_hiring_c_devs_q2_2018/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1522548917.0, "subreddit_name_prefixed": "r/cpp", "ups": 55, "media": null, "num_comments": 29, "title": "Who's Hiring C++ Devs - Q2 2018", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "890baz", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "JonKalb", "num_crossposts": 0, "link_flair_text": "CppCon", "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 34, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "cppcon.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": "cppcon", "author_flair_css_class": "", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "CppCon | C++Now | C++ training", "stickied": true, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_890baz", "spoiler": false, "permalink": "/r/cpp/comments/890baz/cppcon_2018_call_for_submissions_is_released/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1522712954.0, "url": "https://cppcon.org/cfs2018/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1522684154.0, "subreddit_name_prefixed": "r/cpp", "ups": 34, "media": null, "num_comments": 12, "title": "CppCon 2018 Call for Submissions is Released", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bkaj3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "clicked": false, "no_follow": false, "author": "mttd", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 26, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "0x80.pl", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "view_count": null, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8bkaj3", "spoiler": false, "permalink": "/r/cpp/comments/8bkaj3/is_sorted_using_simd_instructions/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523507075.0, "url": "http://0x80.pl/notesen/2018-04-11-simd-is-sorted.html", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523478275.0, "previous_visits": [], "subreddit_name_prefixed": "r/cpp", "ups": 26, "media": null, "num_comments": 7, "title": "is_sorted using SIMD instructions", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Things that I would like to see:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Compiler generated to_string function that by default returns the enum&amp;#39;s name&lt;/li&gt;\n&lt;li&gt;Enum classes being classes (user defined constructor, functions, ++ operator etc)&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A way of quickly mapping an enum to a value. For example I write the following code a lot: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Console_colour colour(const Test_result&amp;amp; test_result) noexcept\n{\n  switch (test_result)\n  {\n  case Test_result::untested:\n    return Console_colour::FG_DEFAULT;\n  case Test_result::success:\n    return Console_colour::FG_LIGHT_GREEN;\n  case Test_result::output_mistmatch:\n    return Console_colour::FG_LIGHT_RED;\n  case Test_result::crash:\n    return Console_colour::FG_LIGHT_RED;\n  case Test_result::timeout:\n    return Console_colour::FG_LIGHT_RED;\n  case Test_result::testing:\n    return Console_colour::FG_RED;\n  case Test_result::no_reference_data:\n    return Console_colour::FG_LIGHT_YELLOW;\n  default:\n    return Console_colour::FG_DEFAULT;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;X_ macros are a way of doing this but are terrible.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Perhaps a nice way to use enums as vector indices? I&amp;#39;d like to write vector&amp;lt;int&amp;gt; { ENUM_1 = 5, ENUM_2 = 10, ENUM_3 = 20 } which is not possible for enum class without explicit casting. More thought required on this idea.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Any other ideas? I use enums a lot but often find my self wishing to do some of the above features.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Things that I would like to see:\n\n1. Compiler generated to_string function that by default returns the enum's name\n2. Enum classes being classes (user defined constructor, functions, ++ operator etc)\n3. A way of quickly mapping an enum to a value. For example I write the following code a lot: \n\n        Console_colour colour(const Test_result&amp; test_result) noexcept\n        {\n          switch (test_result)\n          {\n          case Test_result::untested:\n            return Console_colour::FG_DEFAULT;\n          case Test_result::success:\n            return Console_colour::FG_LIGHT_GREEN;\n          case Test_result::output_mistmatch:\n            return Console_colour::FG_LIGHT_RED;\n          case Test_result::crash:\n            return Console_colour::FG_LIGHT_RED;\n          case Test_result::timeout:\n            return Console_colour::FG_LIGHT_RED;\n          case Test_result::testing:\n            return Console_colour::FG_RED;\n          case Test_result::no_reference_data:\n            return Console_colour::FG_LIGHT_YELLOW;\n          default:\n            return Console_colour::FG_DEFAULT;\n          }\n        }\nX_ macros are a way of doing this but are terrible.\n4. Perhaps a nice way to use enums as vector indices? I'd like to write vector&lt;int&gt; { ENUM_1 = 5, ENUM_2 = 10, ENUM_3 = 20 } which is not possible for enum class without explicit casting. More thought required on this idea.\n\nAny other ideas? I use enums a lot but often find my self wishing to do some of the above features.\n    ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8beveh", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "uninformed_", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 42, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": 1523467966.0, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8beveh", "spoiler": false, "permalink": "/r/cpp/comments/8beveh/are_there_any_proposals_ideas_for_improving_enums/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523455311.0, "url": "https://www.reddit.com/r/cpp/comments/8beveh/are_there_any_proposals_ideas_for_improving_enums/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523426511.0, "subreddit_name_prefixed": "r/cpp", "ups": 42, "media": null, "num_comments": 72, "title": "Are there any proposals / ideas for improving enums?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My classes - and structs - almost never have default constructors. This is because I want to force any client (which is usually just myself)  to initialize certain member variables at the very moment they instantiate an object of the class. For example,&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nclass Person{\npublic:\n    Person(std::string const&amp;amp; name, int age) :\n        name_(name), age_(age) {}\n    // getters\n    // probably no setters for a person if we don&amp;#39;t\n    // expect name or age to change.\nprivate:\n    std::string name_;\n    int age_;\n};\n&lt;/code&gt;\nThis forces the client to instantiate a Person with their name and age, and eliminates the need to initialize member variables to some&amp;quot;dummy&amp;quot; value and have to remember to set them to the &amp;quot;correct&amp;quot; value later on.&lt;/p&gt;\n\n&lt;p&gt;I tend to believe this design makes the interface &amp;quot;easy to use correctly, and hard to use indirectly&amp;quot; (to quote Scott Meyers).&lt;/p&gt;\n\n&lt;p&gt;What are your opinions about this? Do you also avoid default constructors? Do you always provide a default constructor? What&amp;#39;s considered good practice?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "My classes - and structs - almost never have default constructors. This is because I want to force any client (which is usually just myself)  to initialize certain member variables at the very moment they instantiate an object of the class. For example,\n\n```\nclass Person{\npublic:\n    Person(std::string const&amp; name, int age) :\n        name_(name), age_(age) {}\n    // getters\n    // probably no setters for a person if we don't\n    // expect name or age to change.\nprivate:\n    std::string name_;\n    int age_;\n};\n```\nThis forces the client to instantiate a Person with their name and age, and eliminates the need to initialize member variables to some\"dummy\" value and have to remember to set them to the \"correct\" value later on.\n\nI tend to believe this design makes the interface \"easy to use correctly, and hard to use indirectly\" (to quote Scott Meyers).\n\nWhat are your opinions about this? Do you also avoid default constructors? Do you always provide a default constructor? What's considered good practice?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bmkk1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "nicobako", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8bmkk1", "spoiler": false, "permalink": "/r/cpp/comments/8bmkk1/should_my_classesstructs_have_default_constructors/", "subreddit_type": "public", "locked": false, "hide_score": true, "created": 1523526479.0, "url": "https://www.reddit.com/r/cpp/comments/8bmkk1/should_my_classesstructs_have_default_constructors/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523497679.0, "subreddit_name_prefixed": "r/cpp", "ups": 1, "media": null, "num_comments": 2, "title": "Should my classes/structs have default constructors?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bhf0l", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "parallelcompiler", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "reddit.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8bhf0l", "spoiler": false, "permalink": "/r/cpp/comments/8bhf0l/16th_annual_charm_workshop_live_webcast_wedthurs/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523485221.0, "url": "https://www.reddit.com/r/HPC/comments/8bgz23/the_16th_annual_charm_workshop_live_webcast/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523456421.0, "subreddit_name_prefixed": "r/cpp", "ups": 3, "media": null, "num_comments": 0, "title": "16th Annual Charm++ Workshop: LIVE Webcast Wed/Thurs (x-post: r/hpc)", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bb2fv", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "syaghmour", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 53, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "open-std.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8bb2fv", "spoiler": false, "permalink": "/r/cpp/comments/8bb2fv/c_standards_committee_papers_201804/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523420853.0, "url": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/#mailing2018-04", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523392053.0, "subreddit_name_prefixed": "r/cpp", "ups": 53, "media": null, "num_comments": 42, "title": "C++ Standards Committee Papers: 2018-04 post-Jacksonville", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8barv5", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "calebzulawski", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 25, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8barv5", "spoiler": false, "permalink": "/r/cpp/comments/8barv5/cotila_a_compiletime_linear_algebra_system/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523418816.0, "url": "https://github.com/calebzulawski/cotila", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523390016.0, "subreddit_name_prefixed": "r/cpp", "ups": 25, "media": null, "num_comments": 9, "title": "Cotila: a compile-time linear algebra system", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I announced Live++ back then in August 2017 before entering the closed beta. Version 1.0 was released two weeks ago, and I think this could be interesting to C++ developers:\n&lt;a href=\"https://molecular-matters.com/products_livepp.html\"&gt;Link to Live++&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I announced Live++ back then in August 2017 before entering the closed beta. Version 1.0 was released two weeks ago, and I think this could be interesting to C++ developers:\n[Link to Live++](https://molecular-matters.com/products_livepp.html)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8baww1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "tivolo", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 21, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8baww1", "spoiler": false, "permalink": "/r/cpp/comments/8baww1/live_generic_live_codinghotreload_for_c_and_c/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523419787.0, "url": "https://www.reddit.com/r/cpp/comments/8baww1/live_generic_live_codinghotreload_for_c_and_c/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523390987.0, "subreddit_name_prefixed": "r/cpp", "ups": 21, "media": null, "num_comments": 21, "title": "Live++ - generic live coding/hot-reload for C and C++ applications", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bjkdd", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "vormestrand", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "includecpp.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8bjkdd", "spoiler": false, "permalink": "/r/cpp/comments/8bjkdd/include_c/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523501486.0, "url": "http://www.includecpp.org/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523472686.0, "subreddit_name_prefixed": "r/cpp", "ups": 0, "media": null, "num_comments": 3, "title": "#include &lt;C++&gt;", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8b6as5", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "vormestrand", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 58, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "fluentcpp.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8b6as5", "spoiler": false, "permalink": "/r/cpp/comments/8b6as5/which_one_is_better_map_of_vectors_or_multimap/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523380833.0, "url": "https://www.fluentcpp.com/2018/04/10/maps-vectors-multimap/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523352033.0, "subreddit_name_prefixed": "r/cpp", "ups": 58, "media": null, "num_comments": 46, "title": "Which One Is Better: Map of Vectors, or Multimap?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So according to this &lt;a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\"&gt;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&lt;/a&gt; , some alternative acronyms are CADRe and SBRM.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve come up with a new one, or at least one that I haven&amp;#39;t seen before: IIAR.&lt;/p&gt;\n\n&lt;p&gt;Incidental Is Automatically Reclaimed, or even\nIIAR is Automatic Reclamation.&lt;/p&gt;\n\n&lt;p&gt;That way, we can still use RAII to describe what happens when you declare a variable, and IIAR is the reverse of that at the end of its scope.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "So according to this https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization , some alternative acronyms are CADRe and SBRM.\n\nI've come up with a new one, or at least one that I haven't seen before: IIAR.\n\nIncidental Is Automatically Reclaimed, or even\nIIAR is Automatic Reclamation.\n\nThat way, we can still use RAII to describe what happens when you declare a variable, and IIAR is the reverse of that at the end of its scope.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bh36u", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "kwan_e", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8bh36u", "spoiler": false, "permalink": "/r/cpp/comments/8bh36u/yet_another_suggestion_for_an_alternative_to_raii/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523482432.0, "url": "https://www.reddit.com/r/cpp/comments/8bh36u/yet_another_suggestion_for_an_alternative_to_raii/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523453632.0, "subreddit_name_prefixed": "r/cpp", "ups": 0, "media": null, "num_comments": 29, "title": "Yet another suggestion for an alternative to \"RAII\".", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8b2hfz", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "mttd", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 87, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "blogs.msdn.microsoft.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8b2hfz", "spoiler": false, "permalink": "/r/cpp/comments/8b2hfz/msvc_now_correctly_reports_cplusplus/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523340576.0, "url": "https://blogs.msdn.microsoft.com/vcblog/2018/04/09/msvc-now-correctly-reports-__cplusplus/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523311776.0, "subreddit_name_prefixed": "r/cpp", "ups": 87, "media": null, "num_comments": 63, "title": "MSVC now correctly reports __cplusplus", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8bf5c9", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "btwael", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "boutglay.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8bf5c9", "spoiler": false, "permalink": "/r/cpp/comments/8bf5c9/superstring_the_fastest_and_most_memoryoptimized/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523458994.0, "url": "https://www.boutglay.com/SuperString/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523430194.0, "subreddit_name_prefixed": "r/cpp", "ups": 0, "media": null, "num_comments": 33, "title": "SuperString: the fastest and most memory-optimized string library for C++", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If so, did you use it in an interesting way?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "If so, did you use it in an interesting way?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8b3gml", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "cbfreder", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 10, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8b3gml", "spoiler": false, "permalink": "/r/cpp/comments/8b3gml/has_anyone_actually_used_next_permutation/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523349152.0, "url": "https://www.reddit.com/r/cpp/comments/8b3gml/has_anyone_actually_used_next_permutation/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523320352.0, "subreddit_name_prefixed": "r/cpp", "ups": 10, "media": null, "num_comments": 27, "title": "Has anyone actually used next_permutation?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8b2jyu", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "pyler2", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 12, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "godbolt.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8b2jyu", "spoiler": false, "permalink": "/r/cpp/comments/8b2jyu/interesting_optimization_of_gcc_recursion_to/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523341174.0, "url": "https://godbolt.org/g/2ME5QT", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523312374.0, "subreddit_name_prefixed": "r/cpp", "ups": 12, "media": null, "num_comments": 14, "title": "Interesting optimization of GCC: recursion to iterative algorithm", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8b0hyr", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "JonKalb", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 25, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "slashslash.info", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "", "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": "CppCon | C++Now | C++ training", "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8b0hyr", "spoiler": false, "permalink": "/r/cpp/comments/8b0hyr/youd_like_to_give_a_talk_on_c_but_arent_certain/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523325580.0, "url": "http://slashslash.info/2018/04/talk_ideas/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523296780.0, "subreddit_name_prefixed": "r/cpp", "ups": 25, "media": null, "num_comments": 8, "title": "You'd like to give a talk on C++, but aren't certain what to talk about", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8axpb5", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "vormestrand", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 22, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "foonathan.net", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8axpb5", "spoiler": false, "permalink": "/r/cpp/comments/8axpb5/should_you_put_optionalt_in_a_container/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523302140.0, "url": "https://foonathan.net/blog/2018/04/09/optional-in-container.html", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523273340.0, "subreddit_name_prefixed": "r/cpp", "ups": 22, "media": null, "num_comments": 41, "title": "Should You Put optional&lt;T&gt; in a Container?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8atd6k", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "F-J-W", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 113, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "florianjw.de", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8atd6k", "spoiler": false, "permalink": "/r/cpp/comments/8atd6k/octal_zero_considered_harmfull/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523253120.0, "url": "https://florianjw.de/en/octal_zero_considered_harmfull.html", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523224320.0, "subreddit_name_prefixed": "r/cpp", "ups": 113, "media": null, "num_comments": 71, "title": "Octal Zero considered harmfull", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8aon8h", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "vormestrand", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 130, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "accu.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8aon8h", "spoiler": false, "permalink": "/r/cpp/comments/8aon8h/5_reasons_not_to_use_stdostream_for_humanreadable/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523203337.0, "url": "https://accu.org/index.php/journals/2486", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523174537.0, "subreddit_name_prefixed": "r/cpp", "ups": 130, "media": null, "num_comments": 56, "title": "5 Reasons NOT to Use std::ostream for Human-Readable Output", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Looked st new &amp;lt;charconv&amp;gt; in VS2017 15.7 and noticed that it could be constexpr but is not. Why is this so, or did I miss something ? &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Looked st new &lt;charconv&gt; in VS2017 15.7 and noticed that it could be constexpr but is not. Why is this so, or did I miss something ? ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8ar87b", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "DevOmem", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 9, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8ar87b", "spoiler": false, "permalink": "/r/cpp/comments/8ar87b/why_charconv_is_not_constexpr/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523235425.0, "url": "https://www.reddit.com/r/cpp/comments/8ar87b/why_charconv_is_not_constexpr/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523206625.0, "subreddit_name_prefixed": "r/cpp", "ups": 9, "media": null, "num_comments": 17, "title": "Why &lt;charconv&gt; is not constexpr?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8ao5fz", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "_a4z", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 15, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "jguegant.github.io", "hidden": false, "thumbnail": "", "author_cakeday": true, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8ao5fz", "spoiler": false, "permalink": "/r/cpp/comments/8ao5fz/short_summary_of_the_recent_distributed_c_meetup/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523195665.0, "url": "http://jguegant.github.io/blogs/tech/distributed-c++-meetup-0x02.html#distributed-c++-meetup-0x02", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523166865.0, "subreddit_name_prefixed": "r/cpp", "ups": 15, "media": null, "num_comments": 0, "title": "Short summary of the recent distributed C++ Meetup Berlin London Stockholm", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8allmu", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "mttd", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 6, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "accu.org", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8allmu", "spoiler": false, "permalink": "/r/cpp/comments/8allmu/overload_journal_144_april_2018/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523168441.0, "url": "https://accu.org/index.php/journals/c384/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523139641.0, "subreddit_name_prefixed": "r/cpp", "ups": 6, "media": null, "num_comments": 0, "title": "Overload Journal #144 - April 2018", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;it&amp;#39;s been a while since I last spammed reddit with updates about my multiprecision library, mp++. The main news since the last version posted here (0.5) are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;achieved 100% test coverage,&lt;/li&gt;\n&lt;li&gt;various substantial performance improvements, especially involving operations with signed multiprecision integers,&lt;/li&gt;\n&lt;li&gt;full support for GCC-style 128bit integers,&lt;/li&gt;\n&lt;li&gt;bitwise operations for multiprecision integers,&lt;/li&gt;\n&lt;li&gt;a binary serialisation API,&lt;/li&gt;\n&lt;li&gt;Python interoperability utilities via pybind11,&lt;/li&gt;\n&lt;li&gt;various bugfixes, API/documentation enhancements, etc.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Github: &lt;a href=\"https://github.com/bluescarni/mppp\"&gt;https://github.com/bluescarni/mppp&lt;/a&gt;\nDocumentation: &lt;a href=\"https://bluescarni.github.io/mppp/index.html\"&gt;https://bluescarni.github.io/mppp/index.html&lt;/a&gt;\nBenchmarks: &lt;a href=\"https://bluescarni.github.io/mppp/benchmarks.html\"&gt;https://bluescarni.github.io/mppp/benchmarks.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;FAQ&lt;/h1&gt;\n\n&lt;h2&gt;What is this?&lt;/h2&gt;\n\n&lt;p&gt;mp++ is a library for multiprecision integral, rational and floating-point arithmetic. It builds on top of GMP, MPFR and libquadmath. It was originally conceived for use in computer-algebra systems, and it emphasises  performance with small/medium operands.&lt;/p&gt;\n\n&lt;h2&gt;Is the library header only?&lt;/h2&gt;\n\n&lt;p&gt;mp++ is header-only, but it does have a hard dependency on GMP, which is a compiled C library.&lt;/p&gt;\n\n&lt;h2&gt;What about the license?&lt;/h2&gt;\n\n&lt;p&gt;mp++ is released under the MPL2. Its dependencies are released under a variety of licenses, including the LGPL.&lt;/p&gt;\n\n&lt;h2&gt;What are the main differences wrt Boost.Multiprecision?&lt;/h2&gt;\n\n&lt;p&gt;For its intended use cases, mp++ can be substantially faster than BMP. BMP has a wider scope and (at least currently) a richer set of features. BMP also does not necessarily depend on LGPL-licensed libraries.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello,\n\nit's been a while since I last spammed reddit with updates about my multiprecision library, mp++. The main news since the last version posted here (0.5) are:\n\n* achieved 100% test coverage,\n* various substantial performance improvements, especially involving operations with signed multiprecision integers,\n* full support for GCC-style 128bit integers,\n* bitwise operations for multiprecision integers,\n* a binary serialisation API,\n* Python interoperability utilities via pybind11,\n* various bugfixes, API/documentation enhancements, etc.\n\nGithub: https://github.com/bluescarni/mppp\nDocumentation: https://bluescarni.github.io/mppp/index.html\nBenchmarks: https://bluescarni.github.io/mppp/benchmarks.html\n\nFAQ\n===\n\nWhat is this?\n-----------------\n\nmp++ is a library for multiprecision integral, rational and floating-point arithmetic. It builds on top of GMP, MPFR and libquadmath. It was originally conceived for use in computer-algebra systems, and it emphasises  performance with small/medium operands.\n\nIs the library header only?\n----------------------------------\n\nmp++ is header-only, but it does have a hard dependency on GMP, which is a compiled C library.\n\n\nWhat about the license?\n--------------------------------\n\nmp++ is released under the MPL2. Its dependencies are released under a variety of licenses, including the LGPL.\n\nWhat are the main differences wrt Boost.Multiprecision?\n---------------------------------------------------------------------------\n\nFor its intended use cases, mp++ can be substantially faster than BMP. BMP has a wider scope and (at least currently) a richer set of features. BMP also does not necessarily depend on LGPL-licensed libraries.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8ahtwh", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "bluescarni", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 35, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8ahtwh", "spoiler": false, "permalink": "/r/cpp/comments/8ahtwh/mp_010_multiprecision_for_c11/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523134113.0, "url": "https://www.reddit.com/r/cpp/comments/8ahtwh/mp_010_multiprecision_for_c11/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523105313.0, "subreddit_name_prefixed": "r/cpp", "ups": 35, "media": null, "num_comments": 27, "title": "mp++ 0.10 - Multiprecision for C++&gt;=11", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone, recently I was writing a recursive descent parser, in which&lt;br/&gt;\nevery parsing function returns &lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt; indicates whether the parsing succeeded or failed, and I was tired of repeating &lt;code&gt;if (!r) return nullopt&lt;/code&gt; to propagate the failure up. So I turned to find automatically ways to do that.&lt;/p&gt;\n\n&lt;p&gt;My idea was that, &lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt; is like a maybe monad and &lt;code&gt;co_await&lt;/code&gt; is just like the monad thing or the cps thing or something(whatever, I&amp;#39;m not familliar with the term) which can propagate control flow upward.&lt;/p&gt;\n\n&lt;p&gt;So I tried to specialize &lt;code&gt;coroutine_traits&lt;/code&gt; and overload &lt;code&gt;operator co_await&lt;/code&gt; to make it possible, but I can&amp;#39;t.&lt;/p&gt;\n\n&lt;p&gt;In short, the current coroutine &lt;code&gt;co_await&lt;/code&gt; design is only suitable for &lt;code&gt;promise-future&lt;/code&gt; like object, which the promise and the future communicate(passing results) with each other by a shared state or something, and &lt;code&gt;optional&amp;lt;T&amp;gt;&lt;/code&gt; is apparently not a promise-future-like object.&lt;/p&gt;\n\n&lt;p&gt;My code is at &lt;a href=\"https://godbolt.org/g/fRMwRb\"&gt;https://godbolt.org/g/fRMwRb&lt;/a&gt; , the &lt;code&gt;co_await parse_key&lt;/code&gt; part works but in &lt;code&gt;main&lt;/code&gt; I cannot receive correct result, because after calling &lt;code&gt;get_return_type&lt;/code&gt; to construct the return value in &lt;code&gt;main&lt;/code&gt;, the promise_type can not access to the return value in &lt;code&gt;main&lt;/code&gt; anymore, so &lt;code&gt;return_value&lt;/code&gt; cannot modify it. (see the code with &lt;code&gt;// HERE !!!!!!!&lt;/code&gt; comment)&lt;/p&gt;\n\n&lt;p&gt;If I can get where the return value of the function is constructed, I can store the address in &lt;code&gt;promise_type&lt;/code&gt;, and directly manipulate the pointed to object in &lt;code&gt;return_value&lt;/code&gt;. I my case, it is safe, because &lt;code&gt;co_await optional&lt;/code&gt; will at most suspend once and if suspend, it never resume.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;what if the signature of &lt;code&gt;get_return_object&lt;/code&gt; change to &lt;code&gt;void get_return_type(void* address_on_stack)&lt;/code&gt; and return object is &lt;code&gt;placement new&lt;/code&gt;ed into the addres?&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Please forgive me if I made any mistake.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi everyone, recently I was writing a recursive descent parser, in which  \nevery parsing function returns `optional&lt;T&gt;` indicates whether the parsing succeeded or failed, and I was tired of repeating `if (!r) return nullopt` to propagate the failure up. So I turned to find automatically ways to do that.\n\nMy idea was that, `optional&lt;T&gt;` is like a maybe monad and `co_await` is just like the monad thing or the cps thing or something(whatever, I'm not familliar with the term) which can propagate control flow upward.\n\nSo I tried to specialize `coroutine_traits` and overload `operator co_await` to make it possible, but I can't.\n\nIn short, the current coroutine `co_await` design is only suitable for `promise-future` like object, which the promise and the future communicate(passing results) with each other by a shared state or something, and `optional&lt;T&gt;` is apparently not a promise-future-like object.\n\nMy code is at https://godbolt.org/g/fRMwRb , the `co_await parse_key` part works but in `main` I cannot receive correct result, because after calling `get_return_type` to construct the return value in `main`, the promise_type can not access to the return value in `main` anymore, so `return_value` cannot modify it. (see the code with `// HERE !!!!!!!` comment)\n\nIf I can get where the return value of the function is constructed, I can store the address in `promise_type`, and directly manipulate the pointed to object in `return_value`. I my case, it is safe, because `co_await optional` will at most suspend once and if suspend, it never resume.\n\n---\nwhat if the signature of `get_return_object` change to `void get_return_type(void* address_on_stack)` and return object is `placement new`ed into the addres?\n\n---\n\nPlease forgive me if I made any mistake.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8ahp8c", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "MichaelSuen95", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 9, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8ahp8c", "spoiler": false, "permalink": "/r/cpp/comments/8ahp8c/co_await_optional_to_simulate_maybe_monad/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523132460.0, "url": "https://www.reddit.com/r/cpp/comments/8ahp8c/co_await_optional_to_simulate_maybe_monad/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523103660.0, "subreddit_name_prefixed": "r/cpp", "ups": 9, "media": null, "num_comments": 20, "title": "`co_await optional` to simulate maybe monad propagation? impossible?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8apcy0", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "thetechdb", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "thetechdb.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_8apcy0", "spoiler": false, "permalink": "/r/cpp/comments/8apcy0/c_interview_questions_essential_and_useful/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523215389.0, "url": "http://www.thetechdb.com/cplusplus-interview-questions/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523186589.0, "subreddit_name_prefixed": "r/cpp", "ups": 0, "media": null, "num_comments": 14, "title": "C++ interview questions \u2013 Essential and Useful", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_2qi27", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "cpp", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Simple as that, that&amp;#39;s my question why Unix API wasn&amp;#39;t rewritten in C++ yet? Like getopt, sockets, etc&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Simple as that, that's my question why Unix API wasn't rewritten in C++ yet? Like getopt, sockets, etc", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8amh2s", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "lans9831", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": false, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.cpp", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": false, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_8amh2s", "spoiler": false, "permalink": "/r/cpp/comments/8amh2s/why_unix_api_doesnt_take_the_step_to_c/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1523176723.0, "url": "https://www.reddit.com/r/cpp/comments/8amh2s/why_unix_api_doesnt_take_the_step_to_c/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 62490, "created_utc": 1523147923.0, "subreddit_name_prefixed": "r/cpp", "ups": 0, "media": null, "num_comments": 63, "title": "Why Unix API doesn't take the step to C++?", "mod_note": null, "is_video": false, "distinguished": null}}], "before": null}}